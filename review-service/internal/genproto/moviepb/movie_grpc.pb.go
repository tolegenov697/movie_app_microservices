// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: proto/moviepb/movie.proto

package moviepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MovieInterService_GetMovieInfo_FullMethodName     = "/movie.MovieInterService/GetMovieInfo"
	MovieInterService_CheckMovieExists_FullMethodName = "/movie.MovieInterService/CheckMovieExists"
)

// MovieInterServiceClient is the client API for MovieInterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Сервис для межсервисного взаимодействия MovieService
type MovieInterServiceClient interface {
	// Получает краткую информацию о фильме по его ID
	GetMovieInfo(ctx context.Context, in *GetMovieInfoRequest, opts ...grpc.CallOption) (*GetMovieInfoResponse, error)
	// Проверяет, существует ли фильм с данным ID
	CheckMovieExists(ctx context.Context, in *CheckMovieExistsRequest, opts ...grpc.CallOption) (*CheckMovieExistsResponse, error)
}

type movieInterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMovieInterServiceClient(cc grpc.ClientConnInterface) MovieInterServiceClient {
	return &movieInterServiceClient{cc}
}

func (c *movieInterServiceClient) GetMovieInfo(ctx context.Context, in *GetMovieInfoRequest, opts ...grpc.CallOption) (*GetMovieInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMovieInfoResponse)
	err := c.cc.Invoke(ctx, MovieInterService_GetMovieInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieInterServiceClient) CheckMovieExists(ctx context.Context, in *CheckMovieExistsRequest, opts ...grpc.CallOption) (*CheckMovieExistsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckMovieExistsResponse)
	err := c.cc.Invoke(ctx, MovieInterService_CheckMovieExists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MovieInterServiceServer is the server API for MovieInterService service.
// All implementations must embed UnimplementedMovieInterServiceServer
// for forward compatibility.
//
// Сервис для межсервисного взаимодействия MovieService
type MovieInterServiceServer interface {
	// Получает краткую информацию о фильме по его ID
	GetMovieInfo(context.Context, *GetMovieInfoRequest) (*GetMovieInfoResponse, error)
	// Проверяет, существует ли фильм с данным ID
	CheckMovieExists(context.Context, *CheckMovieExistsRequest) (*CheckMovieExistsResponse, error)
	mustEmbedUnimplementedMovieInterServiceServer()
}

// UnimplementedMovieInterServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMovieInterServiceServer struct{}

func (UnimplementedMovieInterServiceServer) GetMovieInfo(context.Context, *GetMovieInfoRequest) (*GetMovieInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMovieInfo not implemented")
}
func (UnimplementedMovieInterServiceServer) CheckMovieExists(context.Context, *CheckMovieExistsRequest) (*CheckMovieExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckMovieExists not implemented")
}
func (UnimplementedMovieInterServiceServer) mustEmbedUnimplementedMovieInterServiceServer() {}
func (UnimplementedMovieInterServiceServer) testEmbeddedByValue()                           {}

// UnsafeMovieInterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MovieInterServiceServer will
// result in compilation errors.
type UnsafeMovieInterServiceServer interface {
	mustEmbedUnimplementedMovieInterServiceServer()
}

func RegisterMovieInterServiceServer(s grpc.ServiceRegistrar, srv MovieInterServiceServer) {
	// If the following call pancis, it indicates UnimplementedMovieInterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MovieInterService_ServiceDesc, srv)
}

func _MovieInterService_GetMovieInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMovieInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieInterServiceServer).GetMovieInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieInterService_GetMovieInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieInterServiceServer).GetMovieInfo(ctx, req.(*GetMovieInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieInterService_CheckMovieExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckMovieExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieInterServiceServer).CheckMovieExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieInterService_CheckMovieExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieInterServiceServer).CheckMovieExists(ctx, req.(*CheckMovieExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MovieInterService_ServiceDesc is the grpc.ServiceDesc for MovieInterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MovieInterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "movie.MovieInterService",
	HandlerType: (*MovieInterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMovieInfo",
			Handler:    _MovieInterService_GetMovieInfo_Handler,
		},
		{
			MethodName: "CheckMovieExists",
			Handler:    _MovieInterService_CheckMovieExists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/moviepb/movie.proto",
}
